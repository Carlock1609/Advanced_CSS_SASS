/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* This starts everything clean taking awy ANY padding and margin in elements on render */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    padding: 30px;
}

.header {
    position: relative;
    height: 95vh;
    /* Apparently yo can set params, the first one is over the second */
    /* to right lets linear-grad know what direction the colors are shown */
    background-image: linear-gradient(to right bottom, 
        #7ed56fc5, 
        #28b485d0), 
        url(../img/hero.jpg);
    /* tries to cover element it is in */
    background-size: cover;
    /* Fixes image to the top, top never changes when movin screen, only sides crop */
    background-position: top;
    /* This is how you can form your image, setting (x y) on each corner */
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.logo-box {
    position: absolute;
    top: 40px;
    left: 40px;
}
.logo {
    height: 35px;
}

.text-box {
    position: absolute;
    /* in relation to the parent element */
    top: 40%;
    left: 50%;
    /* THIS IS HOW TO MAKEE IT RESPONSIVE */
    /* in relation to element itself  */
    transform: translate(-50%, -50%);
    /* This fixes the anchor tag because its text */
    text-align: center;
}
.heading-primary {
    color: #fff;
    text-transform: uppercase;

    backface-visibility: hidden;
    margin-bottom: 60px;
}
.heading-primary-main {
    display: block;
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
}
.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.4px;
    animation-name: moveInRight;
    animation-duration: 1s;
    animation-timing-function: ease-out;
}

@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-100px);
    }
    80% {
        transform: translateX(10px);
    }
    100% {
        opacity: 1;
        transform: translateX(0);
    }
}
@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(100px);
    }
    80% {
        transform: translateX(-10px);
    }
    100% {
        opacity: 1;
        transform: translateX(0);
    }
}
@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(30px);
    }
    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

/* link: anchor tag itself, visited: when link is clicked. These shoud always be together */
.btn:link,
.btn:visited {
    /* This fixes inline elements that have padding height etc,. */
    display: inline-block;
    text-transform: uppercase;
    text-decoration: none;
    padding: 15px 40px;
    border-radius: 100px;
    /* This gives all transistions on btn .2s duration */
    transition: all .2s;
    /* NEED THIS to make the psuedo elements positioning to work */
    position: relative;
}
/* when link hovered */
/* The box shadow makes the button seem like its popping off page, when clicked, goes back down */
.btn:hover {
    transform: translateY(-3px);
    /* X Y BLUR COLOR */
    box-shadow: 0 10px 20px rgba(0,0,0,.2);
}
/* When link clicked */
.btn:active {
    transform: translateY(-1px);
    box-shadow: 0 5px 10px rgba(0,0,0,.2);
}
.btn-white {
    background-color: #fff;
    color: #777;
}

/* Psuedo Element */
/* This is kind of like another layer of the same button */
/* treated like a child of the element thats why we set height and width */
.btn::after {
    /* nessacary to specifiy content or it wont work */
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 100px;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s;
}
.btn-white::after {
    background-color: #fff;
}
.btn:hover::after {
    /* scale increases element */
    transform: scaleX(1.4) scaleY(1.6);
    /* transiion from opacity fades in and out because of transition .4 */
    opacity: 0;
}

.btn-animated {
    animation: moveInBottom .5s ease-out .75s;
    /* automatically apply styles 0% before animation starts */
    animation-fill-mode: backwards;
}